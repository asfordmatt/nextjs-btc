import React from 'react'
import Head from 'next/head'
import Image from 'next/image'

import styles from '../../styles/Home.module.css'

import Binance from 'binance-api-node'

export async function getServerSideProps (context) {
  const client = new Binance()
  const prices = await client.prices()
  prices['AAVEGBP'] = '' + prices['AAVEBTC'] * prices['BTCGBP']
  // console.log(prices['AAVEGBP'])
  return {
    props: {
      prices,
      timestamp: new Date().toString()
    }
  }
}

const holdings = [
  {
    name: 'BTC',
    symbol: 'BTCGBP',
    amount: 0.12017975,
    cost: 3901.9
  },
  {
    name: 'ETH',
    symbol: 'ETHGBP',
    amount: 1.57598066,
    cost: 1675.91
  },
  {
    name: 'DOT',
    symbol: 'DOTGBP',
    amount: 8.26104753,
    cost: 192.60
  },
  {
    name: 'LTC',
    symbol: 'LTCGBP',
    amount: 0.72267813,
    cost: 117.36
  },
  {
    name: 'ADA',
    symbol: 'ADAGBP',
    amount: 85.202968,
    cost: 182.83
  },
  {
    name: 'AAVE',
    symbol: 'AAVEGBP',
    amount: 0.77954762,
    cost: 240
  }
]

const formatSterling = pounds => pounds ? ('Â£' + pounds.toFixed(2)) : ''

const formatValue = value => {
  const v = Number(value)
  if (v > 1) {
    return v.toFixed(2)
  } else {
    return v.toFixed(5)
  }
}

const getValue = (holding, prices) => {
  const exchange = prices[holding.symbol]
  return (holding.amount * exchange)
}

export default function Coins ({ prices, timestamp }) {
  let totalCost = 0
  let totalValue = 0

  return (
    <div className={styles.container}>
      <Head>
        <title>Coins</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Image src="/Bitcoin.svg" alt="Bitcoin Logo" width={72} height={72} />
        <p>{timestamp}</p>
        <table className={styles.cointable}>
          <thead>
            <tr><th>Coin</th><th>Quantity</th><th>Price</th><th>Cost</th><th>Valuation</th><th>Profit / Loss</th><th>%</th></tr>
          </thead>
          <tbody>
            {
              holdings.map(holding => {
                const value = getValue(holding, prices)
                totalCost += holding.cost
                totalValue += value
                const profit = value - holding.cost
                const perc = Number(100 * ((value / holding.cost) - 1)).toFixed(1)
                return (
                  <tr key={holding.name}>
                    <td>{holding.name}</td>
                    <td>{holding.amount}</td>
                    <td>{formatValue(prices[holding.symbol])}</td>
                    <td>{formatSterling(holding.cost)}</td>
                    <td>{formatSterling(value)}</td>
                    <td className={(profit >= 0) ? styles.up : styles.down}>{formatSterling(profit)}</td>
                    <td className={(profit >= 0) ? styles.up : styles.down}>{(perc > 0) ? '+' : ''}{perc}%</td>
                  </tr>
                )
              })
            }
            <tr>
              <th colSpan={3}>Totals:</th>
              <th>{formatSterling(totalCost)}</th>
              <th>{formatSterling(totalValue)}</th>
              <th className={(totalValue >= totalCost) ? styles.up : styles.down}>{formatSterling(totalValue - totalCost)}</th>
              <th className={(totalValue >= totalCost) ? styles.up : styles.down}>{Number(100 * ((totalValue / totalCost) - 1)).toFixed(1)}%</th>
            </tr>
          </tbody>
        </table>
      </main>
    </div>
  )
}
